#BlueJ class context
comment0.target=Valley
comment0.text=\r\n\ Creamos\ a\ Valley.\r\n\ @author\ (Ernesto\ Camacho\ y\ Daniela\ Ruiz)\ \r\n\ @version\ (18/10/2019)\r\n
comment1.params=alto\ ancho
comment1.target=Valley(int,\ int)
comment1.text=\r\n\ Constructor\ de\ objetos\ de\ la\ clase\ Valley.\r\n
comment10.params=
comment10.target=void\ makeInvisible()
comment10.text=\r\n\ Hace\ invisible\ el\ valle\ y\ los\ elementos\ ya\ creados\ invisibles.\r\n
comment11.params=
comment11.target=boolean\ ok()
comment11.text=\r\n\ @return,\ Retorna\ el\ valor\ de\ okFlag.\r\n
comment12.params=trap\ x
comment12.target=void\ makePuncture(int,\ int)
comment12.text=\r\n\ Hace\ un\ hueco\ en\ la\ trampa\ de\ la\ posicion\ seleccionada\ y\ la\ coordenada\ seleccionada.\r\n\ @param\ trap,\ trampa\ en\ la\ posicion\ indicada\r\n\ @param\ posicion,\ coordenada\ del\ hueco\r\n
comment13.params=trap\ posicion
comment13.target=void\ patchPuncture(int,\ int)
comment13.text=\r\n\ Remueve\ un\ hueco\ en\ la\ trampa\ de\ la\ posicion\ seleccionada\ y\ la\ coordenada\ seleccionada.\r\n\ @param\ trap,\ trampa\ en\ la\ posicion\ indicada\r\n\ @param\ posicion,\ coordenada\ del\ hueco\r\n
comment14.params=posicion
comment14.target=void\ stopRain(int)
comment14.text=\r\n\ Detiene\ la\ lluvia\ en\ la\ posicion\ indicada.\r\n\ @param\ posicion,\ posicion\ de\ la\ lluvia\ a\ parar\r\n
comment15.params=type\ x
comment15.target=void\ startRain(java.lang.String,\ int)
comment15.text=\r\n\ Inicia\ la\ lluvia\ en\ la\ posicion\ indicada.\r\n\ @param\ type,\ el\ tipo\ de\ lluvia\ que\ va\ a\ ser\r\n\ @param\ posicion,\ posicion\ de\ la\ lluvia\ a\ empezar\r\n
comment16.params=
comment16.target=void\ startRains()
comment16.text=\r\n\ Mueve\ la\ lluvia.\r\n
comment17.params=rainc
comment17.target=boolean\ checkStraight(Rain)
comment18.params=
comment18.target=java.lang.String[]\ rainFalls()
comment18.text=\r\n\ @return\ rainF,\ retorna\ los\ nombres\ de\ los\ vinedos\ que\ estan\ recibiendo\ lluvia\r\n
comment19.params=
comment19.target=int[][]\ vineyards()
comment19.text=\r\n\ @return\ vineyards,\ retorna\ las\ posiciones\ de\ los\ vinedos\r\n
comment2.params=
comment2.target=void\ hacerValle()
comment2.text=\r\n\ Crea\ las\ caracteriasticas\ del\ valle.\r\n
comment20.params=
comment20.target=int[][][]\ tarps()
comment20.text=\r\n\ @return\ traps,\ retorna\ las\ posiciones\ de\ las\ trampas\ y\ sus\ huecos\r\n
comment21.params=
comment21.target=int[][][]\ rains()
comment21.text=\r\n\ @return\ rains,\ retorna\ los\ recorridos\ de\ las\ lluvias\r\n
comment22.params=nombreVinedo
comment22.target=void\ asignaColor(java.lang.String)
comment22.text=\r\n\ Asigna\ color\ a\ cada\ vinedo.\r\n\ @param\ nombreVinedo,\ viendo\ al\ cual\ se\ le\ asigna\ un\ color\r\n
comment23.params=
comment23.target=void\ asignaPosicionTrampas()
comment23.text=\r\n\ Asigna\ la\ posicion\ de\ las\ trampas.\r\n
comment24.params=
comment24.target=void\ asignaPosicionRain()
comment24.text=\r\n\ Asigna\ la\ posicion\ de\ las\ lluvias.\r\n
comment25.params=name\ xi\ xf
comment25.target=boolean\ checkVineyard(java.lang.String,\ int,\ int)
comment25.text=\r\n\ Se\ encarga\ de\ chequear\ si\ el\ vinedo\ a\ crear\ es\ valido,\ si\ no\ se\ interseca\ con\ ninguna\ trampa\ o\ vinedo,\ y\ si\ no\ existe\ otro\ con\ el\ mismo\ nombre.\r\n\ @param\ name,\ nombre\ del\ vinedo\ a\ probar\r\n\ @param\ xi,\ coordenada\ inicial\ del\ vinedo\r\n\ @param\ xf,\ coordenada\ final\ del\ vinedo\r\n\ @return\ valor,\ si\ puede\ crear\ o\ no\ el\ vinedo\r\n
comment26.params=
comment26.target=void\ trapColor()
comment26.text=\r\n\ Se\ encarga\ de\ determinar\ y\ asignar\ el\ color\ de\ la\ trampa.\r\n
comment27.params=lowerEnd\ higherEnd
comment27.target=boolean\ checkTrap(int[],\ int[])
comment27.text=\r\n\ Se\ encarga\ de\ chequear\ si\ la\ trampa\ a\ crear\ es\ valida\ y\ si\ no\ se\ interseca\ con\ ninguna\ trampa\ o\ vinedo.\r\n\ @param\ lowerEnd,\ coordenada\ \r\n\ @param\ higherEnd,\ coordenada\ \r\n\ @return\ valor,\ si\ puede\ crear\ o\ no\ la\ trampa\r\n
comment28.params=puntoA\ puntoB
comment28.target=boolean\ checkPoints(int[],\ int[])
comment28.text=\r\n\ Se\ encarga\ de\ hacer\ el\ check\ de\ que\ los\ puntos\ sean\ validos.\r\n\ @param\ puntoA,\ punto\ inical\ a\ chequear\ \r\n\ @param\ puntoB,\ punto\ final\ a\ chequear\r\n
comment29.params=
comment29.target=void\ redo()
comment29.text=\r\n\ REDO.\ REHACER\ la\ accion\ que\ se\ realizo\ antes,\ al\ hacer\ el\ metodo\ deshacer\ igual\ se\ vuelve\ a\ guardar\ la\ ultima\ operacion\ relizada,\ para\ asi\ poder\ \r\n\ rehacerla\ deshaciendo\ lo\ que\ deshicimos,\ respetando\ que\ solo\ se\ puede\ hacer\ undo\ y\ redo\ sobre\ la\ operacion\ inmediatamente\ anterior.\ \r\n
comment3.params=c
comment3.target=void\ zoom(char)
comment3.text=\r\n@param\ c,\ es\ el\ caracter\ que\ nos\ indica\ si\ quiere\ acercar\ o\ alejar\ el\ valle,\ '-'\ para\ alejar\ el\ valle\ o\ '+'\ para\ acercar\ el\ valle.\r\n
comment30.params=
comment30.target=void\ undo()
comment30.text=\r\n\ UNDO.\ DESHACER\ la\ accion\ que\ se\ hizo\ antes,\ compara\ el\ ultimo\ metodo\ agregado\ al\ stack\ con\ los\ metodos\ que\ se\ tienen\ y\ se\ hace\ la\ operacion\ inversa\r\n\ a\ la\ eliminada\ para\ asi\ deshacer\ la\ operacion\ realizada\ inmediatamente\ anterior,\ guardando\ igualmnente\ la\ ultima\ operacion\ relaizada\ al\ stack.\r\n
comment31.params=
comment31.target=void\ finish()
comment31.text=\r\n\ Termina\ la\ ejecucion\ del\ programa.\r\n
comment4.params=d
comment4.target=void\ does(char)
comment4.text=\r\n\ REDO/UNDO.\r\n\ @param\ c,\ el\ caracter\ que\ nos\ indica\ si\ quiere\ desahacer\ o\ rehacer\ la\ ultima\ operacion\ relaizada\ 'R'\ para\ rehacer\ la\ ultima\ operacion\ relaizada\ o\ \r\n\ 'U'\ para\ deshacer\ la\ ultima\ operacion\ relaizada.\ Do\ es\ reservado\ en\ java\ para\ el\ do\ while.\ Entonces\ para\ cumplir\ con\ el\ estandar\ que\ se\ usa\ para\ \r\n\ nombrar\ los\ metodos\ usamos\ does.\r\n
comment5.params=name\ xi\ xf
comment5.target=void\ openVineyard(java.lang.String,\ int,\ int)
comment5.text=\r\n\ Crea\ un\ nuevo\ vinedo,\ donde\ la\ coordeanada\ "y"\ de\ los\ puntos\ es\ el\ alto\ del\ valle.\r\n\ @param\ name,\ nombre\ del\ nuevo\ vinedo\r\n\ @param\ xi\ ,\ punto\ inicial\ del\ vinedo\r\n\ @param\ xf,\ punto\ final\ del\ vinedo\r\n
comment6.params=name
comment6.target=void\ closeVineyard(java.lang.String)
comment6.text=\r\n\ Cierra\ el\ vinedo\ especificado,\ no\ cierra\ si\ no\ existe\ un\ vinedo\ con\ ese\ nombre.\r\n\ @param\ name,\ nombre\ del\ vinedo\ a\ cerrar\r\n
comment7.params=type\ lowerEnd\ higherEnd
comment7.target=void\ addTarp(java.lang.String,\ int[],\ int[])
comment7.text=\r\n\ crea\ una\ nueva\ trampa\ al\ valle.\r\n\ @param\ type,\ el\ tipo\ de\ lona\ que\ desea\ crear\r\n\ @param\ lowerEnd,\ array\ con\ 2\ enteros\ coordenadas\ del\ punto\ inferior\r\n\ @param\ higherEnd,\ array\ con\ 2\ enteros\ coordenadas\ del\ punto\ superior\ \r\n
comment8.params=posicion
comment8.target=void\ removeTarp(int)
comment8.text=\r\n\ Remueve\ la\ trampa\ en\ la\ posicion\ indicada.\r\n\ @param\ posicion,\ la\ posicion\ de\ la\ trampa\ a\ remover\r\n
comment9.params=
comment9.target=void\ makeVisible()
comment9.text=\r\n\ Hace\ visible\ el\ valle\ y\ los\ elementos\ ya\ creados\ visibles.\r\n
numComments=32
